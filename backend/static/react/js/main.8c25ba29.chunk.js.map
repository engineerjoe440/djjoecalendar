{"version":3,"sources":["App.js","registerServiceWorker.js","index.js"],"names":["localizer","momentLocalizer","moment","App","props","state","error","events","requestAvailableDates","bind","console","log","body","JSON","stringify","start_year","start","getFullYear","start_month","getMonth","start_day","getDate","end_year","end","end_month","end_day","fetch","method","headers","then","res","json","data","setState","className","this","window","token","defaultDate","Date","defaultView","views","style","height","onRangeChange","Component","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","catch","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","response","status","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"+SAOMA,G,YAAYC,YAAgBC,MA4DnBC,E,kDAzDb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAEDC,MAAQ,CACXC,MAAO,KACPC,OAAQ,IAKV,EAAKC,sBAAwB,EAAKA,sBAAsBC,KAA3B,gBAVZ,E,kEAaGL,GAAQ,IAAD,OAC3BM,QAAQC,IAAIP,GACZ,IAAIQ,EAAOC,KAAKC,UAAU,CACxBC,WAAYF,KAAKC,UAAUV,EAAMY,MAAMC,eACvCC,YAAaL,KAAKC,UAAUV,EAAMY,MAAMG,YACxCC,UAAWP,KAAKC,UAAUV,EAAMY,MAAMK,WACtCC,SAAUT,KAAKC,UAAUV,EAAMmB,IAAIN,eACnCO,UAAWX,KAAKC,UAAUV,EAAMmB,IAAIJ,YACpCM,QAASZ,KAAKC,UAAUV,EAAMmB,IAAIF,aAEpCX,QAAQC,IAAIC,GAEZc,MAAM,uBAAwB,CAC5BC,OAAQ,OACRC,QAAS,CAAE,eAAgB,oBAC3BhB,KAAMA,IACPiB,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UACdF,MAAK,SAAAG,GAAS,EAAKC,SAAS,CAAC1B,OAAQyB,EAAKzB,SAAUG,QAAQC,IAAIqB,EAAKzB,WAIpE,SAAAD,GAAU,EAAK2B,SAAS,CAAC3B,e,+BAK7B,OACE,yBAAK4B,UAAU,OACb,2BAAIC,KAAK9B,MAAMC,OACf,yCAAe8B,OAAOC,OACtB,kBAAC,IAAD,CACErC,UAAWA,EACXsC,YAAa,IAAIC,KACjBC,YAAY,QACZjC,OAAQ4B,KAAK9B,MAAME,OACnBkC,MAAO,CAAC,SACRC,MAAO,CAAEC,OAAQ,SACjBC,cAAeT,KAAK3B,6B,GAnDZqC,aCCZC,EAAcC,QACW,cAA7BX,OAAOY,SAASC,UAEe,UAA7Bb,OAAOY,SAASC,UAEhBb,OAAOY,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,GACvBC,UAAUC,cACPC,SAASH,GACTvB,MAAK,SAAA2B,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACtCD,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBrD,QACfgD,UAAUC,cAAcO,WAK1BnD,QAAQC,IAAI,6CAKZD,QAAQC,IAAI,4CAMrBmD,OAAM,SAAAxD,GACLI,QAAQJ,MAAM,4CAA6CA,MCzEjEyD,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDclC,WACb,GAA6C,kBAAmBb,UAAW,CAGzE,GADkB,IAAIc,IAAIC,gBAAwBhC,OAAOY,UAC3CqB,SAAWjC,OAAOY,SAASqB,OAIvC,OAGFjC,OAAOkC,iBAAiB,QAAQ,WAC9B,IAAMlB,EAAK,UAAMgB,gBAAN,sBAEPtB,IAiDV,SAAiCM,GAE/B1B,MAAM0B,GACHvB,MAAK,SAAA0C,GAGkB,MAApBA,EAASC,SACuD,IAAhED,EAAS3C,QAAQ6C,IAAI,gBAAgBC,QAAQ,cAG7CrB,UAAUC,cAAcqB,MAAM9C,MAAK,SAAA2B,GACjCA,EAAaoB,aAAa/C,MAAK,WAC7BO,OAAOY,SAAS6B,eAKpB1B,EAAgBC,MAGnBU,OAAM,WACLpD,QAAQC,IACN,oEArEAmE,CAAwB1B,GAIxBC,UAAUC,cAAcqB,MAAM9C,MAAK,WACjCnB,QAAQC,IACN,gHAMJwC,EAAgBC,OCzCxB2B,K","file":"js/main.8c25ba29.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport { Calendar, momentLocalizer } from \"react-big-calendar\";\nimport moment from \"moment\";\n\nimport \"./App.css\";\nimport \"react-big-calendar/lib/css/react-big-calendar.css\";\n\nconst localizer = momentLocalizer(moment);\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      error: null,\n      events: []\n    };\n\n    // Make Default Request\n    //this.requestAvailableDates({});\n    this.requestAvailableDates = this.requestAvailableDates.bind(this);\n  }\n\n  requestAvailableDates(props) {\n    console.log(props);\n    var body = JSON.stringify({\n      start_year: JSON.stringify(props.start.getFullYear()),\n      start_month: JSON.stringify(props.start.getMonth()),\n      start_day: JSON.stringify(props.start.getDate()),\n      end_year: JSON.stringify(props.end.getFullYear()),\n      end_month: JSON.stringify(props.end.getMonth()),\n      end_day: JSON.stringify(props.end.getDate())\n    });\n    console.log(body);\n    // Make POST Request with JSON Payload\n    fetch(\"/api/getavailability\", {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: body\n  }).then(res => res.json())\n      .then(data => {this.setState({events: data.events}); console.log(data.events);},\n        // Note: it's important to handle errors here\n        // instead of a catch() block so that we don't swallow\n        // exceptions from actual bugs in components.\n        error => {this.setState({error});}\n      )\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <p>{this.state.error}</p>\n        <p>My Token = {window.token}</p>\n        <Calendar\n          localizer={localizer}\n          defaultDate={new Date()}\n          defaultView=\"month\"\n          events={this.state.events}\n          views={['month']}\n          style={{ height: \"100vh\" }}\n          onRangeChange={this.requestAvailableDates}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}